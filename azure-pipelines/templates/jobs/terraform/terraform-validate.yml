parameters:
  - name: ClientName
    type: string
  - name: Environment
    type: string
  - name: PoolName
    type: string

jobs:
  - job: Terraform_Validate
    dependsOn: Terraform_Init
    displayName: "Terraform Validate - ${{ parameters.ClientName }}-${{ parameters.Environment }}"
    pool:
      name: ${{ parameters.PoolName }}
    steps:
      - checkout: self

      - task: TerraformTask@5
        displayName: 'Terraform Init (for validate)'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'
          backendServiceArm: '$(TF_BACKEND_ARM)'
          backendAzureRmResourceGroupName: '$(TF_BACKEND_RG_NAME)'
          backendAzureRmStorageAccountName: '$(TF_STORAGE_ACCOUNT)'
          backendAzureRmContainerName: '$(TF_BACKEND_CONTAINER)'
          backendAzureRmKey: '${{ parameters.Environment }}/${{ parameters.ClientName }}.tfstate'

      - task: TerraformTask@5
        displayName: 'Terraform Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: Bash@3
        displayName: 'Optional: run tflint (Linux / macOS)'
        condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
        inputs:
          targetType: 'inline'
          script: |
            echo "Checking for tflint..."
            if command -v tflint >/dev/null 2>&1; then
              echo "Running tflint"
              tflint --init || true
              tflint || true
            else
              echo "tflint not found; skipping. To enable tflint, install it on the agent or add a step to install it."
            fi
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: PowerShell@2
        displayName: 'Optional: run tflint (Windows)'
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Checking for tflint..."
            if (Get-Command tflint -ErrorAction SilentlyContinue) {
              Write-Host "Running tflint"
              tflint --init | Out-Null
              try { tflint } catch { Write-Host "tflint failed (non-fatal)" }
            } else {
              Write-Host "tflint not found; skipping. To enable tflint, install it on the agent or add a step to install it."
            }
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'
