parameters:
  - name: ClientName
    type: string
  - name: Environment
    type: string
  - name: PoolName
    type: string
  - name: AutoFormatCommit
    type: boolean
    default: false

jobs:
  - job: Terraform_Validate
    dependsOn: Terraform_Init
    displayName: "Terraform Validate - ${{ parameters.ClientName }}-${{ parameters.Environment }}"
    pool:
      name: ${{ parameters.PoolName }}
    steps:
      - checkout: self
        persistCredentials: ${{ parameters.AutoFormatCommit }}

      # Fetch secrets from Key Vault (set pipeline variables pg_admin_password and pg_admin_login)
      - task: AzureCLI@2
        displayName: 'Fetch DB secrets from Key Vault (bash)'
        condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
        inputs:
          azureSubscription: '$(TF_BACKEND_ARM)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            VAULT="vs-infra-${{ parameters.Environment }}"
            SECRET_PW="postgresql-admin-password-${{ parameters.ClientName }}-${{ parameters.Environment }}"
            SECRET_LOGIN="postgresql-admin-login-${{ parameters.ClientName }}-${{ parameters.Environment }}"
            PW=$(az keyvault secret show --vault-name "$VAULT" --name "$SECRET_PW" --query value -o tsv 2>/dev/null || echo "")
            LOGIN=$(az keyvault secret show --vault-name "$VAULT" --name "$SECRET_LOGIN" --query value -o tsv 2>/dev/null || echo "")
            if [ -n "$PW" ]; then
              echo "##vso[task.setvariable variable=pg_admin_password;issecret=true]$PW"
              echo "##vso[task.setvariable variable=pg_admin_password_exists]true"
            else
              echo "##vso[task.setvariable variable=pg_admin_password;issecret=true]"""
              echo "##vso[task.setvariable variable=pg_admin_password_exists]false"
            fi
            if [ -n "$LOGIN" ]; then
              echo "##vso[task.setvariable variable=pg_admin_login;issecret=false]$LOGIN"
              echo "##vso[task.setvariable variable=pg_admin_login_exists]true"
            else
              echo "##vso[task.setvariable variable=pg_admin_login;issecret=false]"""
              echo "##vso[task.setvariable variable=pg_admin_login_exists]false"
            fi

      - task: AzureCLI@2
        displayName: 'Fetch DB secrets from Key Vault (PowerShell)'
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          azureSubscription: '$(TF_BACKEND_ARM)'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $vault = "vs-infra-${{ parameters.Environment }}"
            $secretPw = "postgresql-admin-password-${{ parameters.ClientName }}-${{ parameters.Environment }}"
            $secretLogin = "postgresql-admin-login-${{ parameters.ClientName }}-${{ parameters.Environment }}"
            $pw = ""
            try { $pw = (az keyvault secret show --vault-name $vault --name $secretPw --query value -o tsv) } catch {}
            $login = ""
            try { $login = (az keyvault secret show --vault-name $vault --name $secretLogin --query value -o tsv) } catch {}
            if ($pw) { Write-Host "##vso[task.setvariable variable=pg_admin_password;issecret=true]$pw"; Write-Host "##vso[task.setvariable variable=pg_admin_password_exists]true" } else { Write-Host "##vso[task.setvariable variable=pg_admin_password;issecret=true]"""; Write-Host "##vso[task.setvariable variable=pg_admin_password_exists]false" }
            if ($login) { Write-Host "##vso[task.setvariable variable=pg_admin_login;issecret=false]$login"; Write-Host "##vso[task.setvariable variable=pg_admin_login_exists]true" } else { Write-Host "##vso[task.setvariable variable=pg_admin_login;issecret=false]"""; Write-Host "##vso[task.setvariable variable=pg_admin_login_exists]false" }

      - task: TerraformTask@5
        displayName: 'Terraform Init (for validate)'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'
          backendServiceArm: '$(TF_BACKEND_ARM)'
          backendAzureRmResourceGroupName: '$(TF_BACKEND_RG_NAME)'
          backendAzureRmStorageAccountName: '$(TF_STORAGE_ACCOUNT)'
          backendAzureRmContainerName: '$(TF_BACKEND_CONTAINER)'
          backendAzureRmKey: '${{ parameters.Environment }}/${{ parameters.ClientName }}.tfstate'

      - task: TerraformTask@5
        displayName: 'Terraform Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'
          vars: |
            client=${{ parameters.ClientName }}
            environment=${{ parameters.Environment }}

      - task: Bash@3
        displayName: 'Terraform Fmt (check) (Linux / macOS)'
        condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
        inputs:
          targetType: 'inline'
          script: |
            echo "Running terraform fmt -check -recursive"
            if ! terraform fmt -check -recursive; then
              echo "terraform fmt found issues. Files needing format (summary):"
              terraform fmt -list -recursive || true
              echo "Showing diffs:"
              terraform fmt -diff -recursive || true
              exit 1
            fi
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: PowerShell@2
        displayName: 'Terraform Fmt (check) (Windows)'
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Running terraform fmt -check -recursive"
            & terraform fmt -check -recursive
            if ($LASTEXITCODE -ne 0) {
              Write-Host "terraform fmt found issues. Files needing format (summary):"
              & terraform fmt -list -recursive | Write-Host
              Write-Host "Showing diffs:"
              & terraform fmt -diff -recursive
              exit $LASTEXITCODE
            }
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: Bash@3
        displayName: 'Install tflint (Linux / macOS)'
        condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
        inputs:
          targetType: 'inline'
          script: |
            echo "Checking for tflint..."
            if command -v tflint >/dev/null 2>&1; then
              echo "tflint already installed"
              exit 0
            fi
            echo "tflint not found; installing latest..."
            OS_NAME=$(uname -s)
            case "$OS_NAME" in
              Linux*) FILE="tflint_linux_amd64.zip" ;;
              Darwin*) FILE="tflint_darwin_amd64.zip" ;;
              *) echo "Unsupported OS: $OS_NAME"; exit 1 ;;
            esac
            URL="https://github.com/terraform-linters/tflint/releases/latest/download/${FILE}"
            echo "Downloading $URL"
            TMPZIP="/tmp/${FILE}"
            curl -sSL -o "$TMPZIP" "$URL"
            INSTALL_DIR="${AGENT_TOOLSDIRECTORY:-/tmp}/tflint/latest"
            mkdir -p "$INSTALL_DIR"
            unzip -o "$TMPZIP" -d "$INSTALL_DIR" || true
            chmod +x "$INSTALL_DIR/tflint" || true
            echo "##vso[task.prependpath]$INSTALL_DIR"
            rm -f "$TMPZIP"
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: Bash@3
        displayName: 'Optional: run tflint (Linux / macOS)'
        condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))
        inputs:
          targetType: 'inline'
          script: |
            echo "Checking for tflint..."
            if command -v tflint >/dev/null 2>&1; then
              echo "Running tflint"
              tflint --init || true
              tflint || true
            else
              echo "tflint not found after install attempt; skipping."
            fi
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: PowerShell@2
        displayName: 'Install tflint (Windows)'
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Checking for tflint..."
            if (Get-Command tflint -ErrorAction SilentlyContinue) {
              Write-Host "tflint already installed"
              exit 0
            }
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              Write-Host "Installing tflint via Chocolatey"
              choco install tflint -y
              exit 0
            }
            Write-Host "Chocolatey not found; downloading tflint zip"
            $url = "https://github.com/terraform-linters/tflint/releases/latest/download/tflint_windows_amd64.zip"
            $out = "$env:TEMP\tflint.zip"
            Invoke-WebRequest -Uri $url -OutFile $out
            $toolsDir = $env:AGENT_TOOLSDIRECTORY
            if (-not $toolsDir) { $toolsDir = "C:\agent\_work\_tool" }
            $dest = Join-Path $toolsDir "tflint\latest"
            New-Item -ItemType Directory -Path $dest -Force | Out-Null
            Expand-Archive -Path $out -DestinationPath $dest -Force
            Write-Host "##vso[task.prependpath]$dest"
            Write-Host "tflint installed to $dest"
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: PowerShell@2
        displayName: 'Optional: run tflint (Windows)'
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Checking for tflint..."
            if (Get-Command tflint -ErrorAction SilentlyContinue) {
              Write-Host "Running tflint"
              tflint --init | Out-Null
              try { tflint } catch { Write-Host "tflint failed (non-fatal)" }
            } else {
              Write-Host "tflint not found after install attempt; skipping."
            }
          workingDirectory: 'terraform/environments/${{ parameters.Environment }}'

      - task: Bash@3
        displayName: 'Auto-commit terraform fmt changes (Linux/macOS)'
        condition: and(eq('${{ parameters.AutoFormatCommit }}','true'), or(eq(variables['Agent.OS'],'Linux'), eq(variables['Agent.OS'],'Darwin')))
        inputs:
          targetType: 'inline'
          script: |
            echo "Checking for git changes..."
            cd terraform/environments/${{ parameters.Environment }}
            git config user.email "azure-pipelines@users.noreply"
            git config user.name "Azure Pipelines"
            if git diff --quiet --exit-code; then
              echo "No formatting changes to commit"
            else
              git add -A
              git commit -m "chore: terraform fmt (CI)"
              git push
            fi

      - task: PowerShell@2
        displayName: 'Auto-commit terraform fmt changes (Windows)'
        condition: and(eq('${{ parameters.AutoFormatCommit }}','true'), eq(variables['Agent.OS'],'Windows_NT'))
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Checking for git changes..."
            Set-Location -Path "terraform/environments/${{ parameters.Environment }}"
            git config user.email "azure-pipelines@users.noreply"
            git config user.name "Azure Pipelines"
            $diff = git status --porcelain
            if ([string]::IsNullOrEmpty($diff)) {
              Write-Host "No formatting changes to commit"
            } else {
              git add -A
              git commit -m "chore: terraform fmt (CI)"
              git push
            }
